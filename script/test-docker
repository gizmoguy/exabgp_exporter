#!/bin/bash
if ${CI}; then
    # skip in ci for now due to weirdness
    exit 0
fi
EXPECTED_ANNOUNCE=$(cat <<EOA
# HELP peer_resets tracks number of resets communicating with a peer
# TYPE peer_resets gauge
peer_resets{peer_asn="64496",peer_ip="127.0.0.1",reason="peer reset, message (closing connection) error(Broken TCP connection)",self_asn="64496",self_ip="127.0.0.1"} 4
# HELP peer_route_state shows the current peer state for a given route
# TYPE peer_route_state gauge
peer_route_state{family="ipv4 unicast",nlri="192.168.88.0/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.104/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.112/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.120/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.128/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.136/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.144/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.152/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.16/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.160/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.168/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.176/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.184/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.192/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.200/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.208/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.216/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.224/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.232/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.24/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.240/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.248/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.32/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.40/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.48/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.56/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.64/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.72/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.8/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.80/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.88/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
peer_route_state{family="ipv4 unicast",nlri="192.168.88.96/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
# HELP peer_state shows the current peer state
# TYPE peer_state gauge
peer_state{peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
EOA
)

EXPECTED_WITHDRAW=$(cat <<EOA
# HELP peer_resets tracks number of resets communicating with a peer
# TYPE peer_resets gauge
peer_resets{peer_asn="64496",peer_ip="127.0.0.1",reason="peer reset, message (closing connection) error(Broken TCP connection)",self_asn="64496",self_ip="127.0.0.1"} 4
# HELP peer_route_state shows the current peer state for a given route
# TYPE peer_route_state gauge
peer_route_state{family="ipv4 unicast",nlri="192.168.88.0/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.104/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.112/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.120/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.128/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.136/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.144/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.152/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.16/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.160/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.168/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.176/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.184/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.192/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.200/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.208/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.216/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.224/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.232/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.24/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.240/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.248/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.32/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.40/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.48/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.56/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.64/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.72/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.8/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.80/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.88/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
peer_route_state{family="ipv4 unicast",nlri="192.168.88.96/29",peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 0
# HELP peer_state shows the current peer state
# TYPE peer_state gauge
peer_state{peer_asn="64496",peer_ip="127.0.0.1",self_asn="64496",self_ip="127.0.0.1"} 1
EOA
)
ACTUAL_ANNOUNCE=$(script/announce-docker)
sleep 3
echo "testing announce"
diff  <(echo "$EXPECTED_ANNOUNCE" ) <(echo "$ACTUAL_ANNOUNCE")
if ! diff  <(echo "$EXPECTED_ANNOUNCE" ) <(echo "$ACTUAL_ANNOUNCE"); then
    docker logs exabgp_exporter
    exit 1
fi

ACTUAL_WITHDRAW=$(script/withdraw-docker)
echo "testing withdraw"
sleep 3
if ! diff  <(echo "$EXPECTED_WITHDRAW" ) <(echo "$ACTUAL_WITHDRAW"); then
    docker logs exabgp_exporter
    exit 1
fi